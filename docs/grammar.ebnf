program =
  | statement+ EOF
  ;



######### Statements #########

statement =
  | let_stmt
  | if_stmt
  | while_stmt
  | print_stmt
  | print_int_stmt
  | postfix_stmt
  ;

let_stmt =
  | "let" IDENT "=" expression ";"
  ;

if_stmt =
  | "if" "(" expression ")" stmt_block ( else_stmt )?
  ;

else_stmt =
  | "else" stmt_block
  ;

while_stmt =
  | "while" "(" expression ")" stmt_block
  ;

print_stmt =
  | "print" expression ";"
  ;

print_int_stmt =
  | "print_int" expression ";"
  ;

postfix_stmt =
  | expression ( "=" expression )? ";"
  ;

stmt_block =
  | "{" statement* "}"
  ;



######### Expressions #########

expression =
  | or_expr
  ;

or_expr =
  | and_expr ( "|" and_expr )*

and_expr =
  | equal_expr ( "&" equal_expr )*
  ;

equal_expr =
  | rela_expr ( ( "==" | "!=" ) rela_expr)*
  ;

rela_expr =
  | shift_expr ( ( "<" | "<=" | ">" | ">=" ) shift_expr )*
  ;

shift_expr =
  | add_expr ( ( "<<" | ">>" ) add_expr )*

add_expr =
  | mult_expr ( ( "+" | "-" ) mult_expr )*
  ;

mult_expr =
  | postfix_expr ( ( "*" | "/" | "%" ) postfix_expr )*
  ;

postfix_expr =
  | primary_expr ( "[" expression "]" )?
  ;

primary_expr =
  | NUMBER
  | IDENT
  | "[" expression "]"
  | "(" expression ")"
  ;



######### Constants #########

NUMBER = [0-9]+ ;
IDENT = [a-zA-Z_][a-zA-Z0-9_]* ;


a[1] = 0;
